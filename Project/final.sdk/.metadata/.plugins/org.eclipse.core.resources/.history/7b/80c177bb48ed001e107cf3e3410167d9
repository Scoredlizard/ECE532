/*
 *
 * Xilinx, Inc.
 * XILINX IS PROVIDING THIS DESIGN, CODE, OR INFORMATION "AS IS" AS A 
 * COURTESY TO YOU.  BY PROVIDING THIS DESIGN, CODE, OR INFORMATION AS
 * ONE POSSIBLE   IMPLEMENTATION OF THIS FEATURE, APPLICATION OR 
 * STANDARD, XILINX IS MAKING NO REPRESENTATION THAT THIS IMPLEMENTATION 
 * IS FREE FROM ANY CLAIMS OF INFRINGEMENT, AND YOU ARE RESPONSIBLE 
 * FOR OBTAINING ANY RIGHTS YOU MAY REQUIRE FOR YOUR IMPLEMENTATION
 * XILINX EXPRESSLY DISCLAIMS ANY WARRANTY WHATSOEVER WITH RESPECT TO 
 * THE ADEQUACY OF THE IMPLEMENTATION, INCLUDING BUT NOT LIMITED TO 
 * ANY WARRANTIES OR REPRESENTATIONS THAT THIS IMPLEMENTATION IS FREE 
 * FROM CLAIMS OF INFRINGEMENT, IMPLIED WARRANTIES OF MERCHANTABILITY 
 * AND FITNESS FOR A PARTICULAR PURPOSE.
 */

/*
 * 
 *
 * This file is a generated sample test application.
 *
 * This application is intended to test and/or illustrate some 
 * functionality of your system.  The contents of this file may
 * vary depending on the IP in your system and may use existing
 * IP driver functions.  These drivers will be generated in your
 * SDK application project when you run the "Generate Libraries" menu item.
 *
 */

#include <stdio.h>
#include "xparameters.h"
#include "xil_cache.h"
#include "xintc.h"
#include "intc_header.h"
#include "xgpio.h"
#include "gpio_header.h"
#include "xtmrctr.h"
#include "tmrctr_header.h"
#include "tmrctr_intr_header.h"

int test() {
   static XIntc intc;
   static XTmrCtr axi_timer_0_Timer;
   Xil_ICacheEnable();
   Xil_DCacheEnable();
   print("---Entering main---\n\r");


   {
	  int status;

	  print("\r\n Running IntcSelfTestExample() for microblaze_0_axi_intc...\r\n");

	  status = IntcSelfTestExample(XPAR_MICROBLAZE_0_AXI_INTC_DEVICE_ID);

	  if (status == 0) {
		 print("IntcSelfTestExample PASSED\r\n");
	  }
	  else {
		 print("IntcSelfTestExample FAILED\r\n");
	  }
   }

   {
	   int Status;

	   Status = IntcInterruptSetup(&intc, XPAR_MICROBLAZE_0_AXI_INTC_DEVICE_ID);
	   if (Status == 0) {
		  print("Intc Interrupt Setup PASSED\r\n");
	   }
	   else {
		 print("Intc Interrupt Setup FAILED\r\n");
	  }
   }



   {
	  u32 status;

	  print("\r\nRunning GpioInputExample() for axi_gpio_cam...\r\n");

	  u32 DataRead;

	  status = GpioInputExample(XPAR_AXI_GPIO_CAM_DEVICE_ID, &DataRead);

	  if (status == 0) {
		 xil_printf("GpioInputExample PASSED. Read data:0x%X\r\n", DataRead);
	  }
	  else {
		 print("GpioInputExample FAILED.\r\n");
	  }
   }



   {
	  int status;

	  print("\r\n Running TmrCtrSelfTestExample() for axi_servo_0...\r\n");

	  status = TmrCtrSelfTestExample(XPAR_AXI_SERVO_0_DEVICE_ID, 0x0);

	  if (status == 0) {
		 print("TmrCtrSelfTestExample PASSED\r\n");
	  }
	  else {
		 print("TmrCtrSelfTestExample FAILED\r\n");
	  }
   }



   {
	  int status;

	  print("\r\n Running TmrCtrSelfTestExample() for axi_servo_1...\r\n");

	  status = TmrCtrSelfTestExample(XPAR_AXI_SERVO_1_DEVICE_ID, 0x0);

	  if (status == 0) {
		 print("TmrCtrSelfTestExample PASSED\r\n");
	  }
	  else {
		 print("TmrCtrSelfTestExample FAILED\r\n");
	  }
   }



   {
	  int status;

	  print("\r\n Running TmrCtrSelfTestExample() for axi_servo_2...\r\n");

	  status = TmrCtrSelfTestExample(XPAR_AXI_SERVO_2_DEVICE_ID, 0x0);

	  if (status == 0) {
		 print("TmrCtrSelfTestExample PASSED\r\n");
	  }
	  else {
		 print("TmrCtrSelfTestExample FAILED\r\n");
	  }
   }



   {
	  int status;

	  print("\r\n Running TmrCtrSelfTestExample() for axi_timer_0...\r\n");

	  status = TmrCtrSelfTestExample(XPAR_AXI_TIMER_0_DEVICE_ID, 0x0);

	  if (status == 0) {
		 print("TmrCtrSelfTestExample PASSED\r\n");
	  }
	  else {
		 print("TmrCtrSelfTestExample FAILED\r\n");
	  }
   }
   {
	  int Status;

	  print("\r\n Running Interrupt Test  for axi_timer_0...\r\n");

	  Status = TmrCtrIntrExample(&intc, &axi_timer_0_Timer, \
								 XPAR_AXI_TIMER_0_DEVICE_ID, \
								 XPAR_MICROBLAZE_0_AXI_INTC_AXI_TIMER_0_INTERRUPT_INTR, 0);
	
	  if (Status == 0) {
		 print("Timer Interrupt Test PASSED\r\n");
	  }
	  else {
		 print("Timer Interrupt Test FAILED\r\n");
	  }

   }


   /*
	* Peripheral SelfTest will not be run for axi_uartlite_0
	* because it has been selected as the STDOUT device
	*/




   {
	  u32 status;

	  print("\r\nRunning GpioOutputExample() for axi_gpio_belt...\r\n");

	  status = GpioOutputExample(XPAR_AXI_GPIO_BELT_DEVICE_ID,3);

	  if (status == 0) {
		 print("GpioOutputExample PASSED.\r\n");
	  }
	  else {
		 print("GpioOutputExample FAILED.\r\n");
	  }
   }


   print("---Exiting main---\n\r");
   Xil_DCacheDisable();
   Xil_ICacheDisable();
   return 0;
}

void delay(unsigned int time) {
	//Delay in ms
	XTmrCtr timer;
	XTmrCtr_Initialize(&timer, XPAR_AXI_TIMER_0_DEVICE_ID);
	XTmrCtr_SetResetValue(&timer, 0, XPAR_AXI_TIMER_0_CLOCK_FREQ_HZ / 1000);
	XTmrCtr_Start(&timer, 0);
	while(XTmrCtr_GetValue(&timer, 0)/100000 != time) {
		;
	}
}

void pwm() {
	XTmrCtr pwm_0;
	int Status;
	u8 DutyCycle;
	Status = XTmrCtr_Initialize(&pwm_0, XPAR_AXI_SERVO_0_DEVICE_ID);
	if (Status != XST_SUCCESS) {
		xil_printf("Error!\n");
	}
	while (1) {
		XTmrCtr_PwmDisable(&pwm_0);
		DutyCycle = XTmrCtr_PwmConfigure(&pwm_0, 10000000, 10000000/6);
		//xil_printf("DutyCycle = %d\n", DutyCycle);
		XTmrCtr_PwmEnable(&pwm_0);
		delay(1000);
		XTmrCtr_PwmDisable(&pwm_0);
		DutyCycle = XTmrCtr_PwmConfigure(&pwm_0, 10000000, 10000000/12);
		//xil_printf("DutyCycle = %d\n", DutyCycle);
		XTmrCtr_PwmEnable(&pwm_0);
		delay(1000);
	}
}

void cam_init(XGpio* cam) {
	XGpio_Initialize(cam, XPAR_AXI_GPIO_CAM_DEVICE_ID);
	XGpio_SetDataDirection(cam, 1, 1);
}

void cam_test(XGpio* cam) {
	u32 val = XGpio_DiscreteRead(cam, 1);
	xil_printf("Inference result: %d\n", val);
}

u32 cam_capture(XGpio* cam) {
	return XGpio_DiscreteRead(cam, 1);
}

void belt_init(XGpio* belt) {
	XGpio_Initialize(belt, XPAR_AXI_GPIO_BELT_DEVICE_ID);
	XGpio_SetDataDirection(belt, 1, 0);
	XGpio_DiscreteWrite(belt, 1, 0);
}

void belt_forward(XGpio* belt, int time) {
	XGpio_DiscreteWrite(belt, 1, 0b011);
	delay(time);
	XGpio_DiscreteWrite(belt, 1, 0);
}

void belt_backward(XGpio* belt, int time) {
	XGpio_DiscreteWrite(belt, 1, 0b101);
	delay(time);
	XGpio_DiscreteWrite(belt, 1, 0);
}

void belt_test(XGpio* belt) {
	xil_printf("-----Entering Belt Test-----\n");
	xil_printf("Moving belt forward...");
	belt_forward(belt, 5000);
	xil_printf("Done\n");
	xil_printf("Waiting some time...");
	delay(1000);
	xil_printf("Done\n");
	xil_printf("Moving belt backward...");
	belt_backward(belt, 5000);
	xil_printf("Done\n");
	xil_printf("-----Exiting Belt Test-----\n");
}

void servos_unblock(XTmrCtr* servo) {
	XTmrCtr_PwmDisable(servo);
	XTmrCtr_PwmConfigure(servo, 10000000, 10000000/5);
	XTmrCtr_PwmEnable(servo);
}

void servos_block(XTmrCtr* servo) {
	XTmrCtr_PwmDisable(servo);
	XTmrCtr_PwmConfigure(servo, 10000000, 10000000/12);
	XTmrCtr_PwmEnable(servo);
}

void servos_init(XTmrCtr* servo_0, XTmrCtr* servo_1, XTmrCtr* servo_2) {
	XTmrCtr_Initialize(servo_0, XPAR_AXI_SERVO_0_DEVICE_ID);
	XTmrCtr_Initialize(servo_1, XPAR_AXI_SERVO_1_DEVICE_ID);
	XTmrCtr_Initialize(servo_2, XPAR_AXI_SERVO_2_DEVICE_ID);

	servos_unblock(servo_0);
	servos_unblock(servo_1);
	servos_unblock(servo_2);
}

void servos_test(XTmrCtr* servo_0, XTmrCtr* servo_1, XTmrCtr* servo_2) {
	xil_printf("-----Entering Servo Test-----\n");
	xil_printf("Blocking Servo 0...");
	servos_block(servo_0);
	xil_printf("Done\n");
	delay(1000);
	xil_printf("Unblocking Servo 0...");
	servos_unblock(servo_0);
	xil_printf("Done\n");
	delay(1000);
	xil_printf("Blocking Servo 1...");
	servos_block(servo_1);
	xil_printf("Done\n");
	delay(1000);
	xil_printf("Unblocking Servo 1...");
	servos_unblock(servo_1);
	xil_printf("Done\n");
	delay(1000);
	xil_printf("Blocking Servo 2...");
	servos_block(servo_2);
	xil_printf("Done\n");
	delay(1000);
	xil_printf("Unblocking Servo 2...");
	servos_unblock(servo_2);
	xil_printf("Done\n");
	xil_printf("-----Exiting Servo Test-----\n");
	delay(1000);
}

int main () {
	//Initialize Peripherals
	XGpio belt;
	belt_init(&belt);

	XTmrCtr servo_0, servo_1, servo_2;
	servos_init(&servo_0, &servo_1, &servo_2);
	delay(2000);
//	while(1) {
//		servos_test(&servo_0, &servo_1, &servo_2);
//	}

//	while(1) {
//		servos_block(&servo_0);
//		servos_block(&servo_1);
//		servos_block(&servo_2);
//		xil_printf("BLOCKED\n");
//		delay(5000);
//		servos_unblock(&servo_0);
//		servos_unblock(&servo_1);
//		servos_unblock(&servo_2);
//		xil_printf("UNBLOCKED\n");
//		delay(5000);
//
//	}

	XGpio cam;
	cam_init(&cam);

	int running = 1;
	//Begin Sorting Loop
	while (running) {
		xil_printf("Moving object into frame...");
		belt_forward(&belt, 4000);
		xil_printf("Done\n");

		delay(2000);

		xil_printf("Averaging sorting results...");
		u32 bins[4];
		u32 avgVal = 0;
		u32 avgIdx = -1;
		for (int i = 0; i < 10; i++) {
			u32 val = cam_capture(&cam);
			if (val == 8) {
				bins[0] = bins[0] + 1;
				if (bins[0] > avgVal) {
					avgVal = bins[0];
					avgIdx = 0;
				}
			} else if (val == 4) {
				bins[1] = bins[1] + 1;
				if (bins[1] > avgVal) {
					avgVal = bins[1];
					avgIdx = 1;
				}
			} else if (val == 2) {
				bins[2] = bins[2] + 1;
				if (bins[2] > avgVal) {
					avgVal = bins[2];
					avgIdx = 2;
				}
			} else if (val == 1) {
				bins[3] = bins[3] + 1;
				if (bins[3] > avgVal) {
					avgVal = bins[3];
					avgIdx = 3;
				}
			}
		}
		xil_printf("Sort counts: %d %d %d %d\n", bins[0], bins[1], bins[2], bins[3]);
		xil_printf("Done\n");

		delay(2000);

		xil_printf("Extending paddle %d...", avgIdx);
		if(avgIdx == 0) {
			servos_block(&servo_0);
		} else if (avgIdx == 1) {
			servos_block(&servo_1);
		} else if (avgIdx == 2) {
			servos_block(&servo_2);
		} else if (avgIdx == 3) {
			;
		} else {
			xil_printf("Error: No servo triggered!\n");
		}
		xil_printf("Done\n");

		xil_printf("Pushing object into bin...");
		belt_forward(&belt, 20000);
		xil_printf("Done\n");

		xil_printf("Retracting paddle...");
		if(avgIdx == 0) {
			servos_unblock(&servo_0);
		} else if (avgIdx == 1) {
			servos_unblock(&servo_1);
		} else if (avgIdx == 2) {
			servos_unblock(&servo_2);
		}
		xil_printf("Done\n");

		xil_printf("Waiting some time before next object...");
		delay(5000);
		xil_printf("Done\n");
	}
	return 0;
}
