#include <stdio.h>

#include <xbasic_types.h>
#include <xparameters.h>
#include <xtmrctr.h>

#include "xgpio.h"

#define RESET_SUCCESS 1
#define RESET_FAIL 0

#define DEBOUNCE_DELAY_MILLISECONDS 10
#define FREQUENCY_HERTZ 100000

XGpio btnc_gpio;
XGpio btnd_gpio;
XGpio btnl_gpio;
XGpio btnr_gpio;

XTmrCtr timer;

unsigned int btnc_current_state = 0;
unsigned int btnd_current_state = 0;
unsigned int btnl_current_state = 0;
unsigned int btnr_current_state = 0;

unsigned int btnc_previous_state = 0;
unsigned int btnd_previous_state = 0;
unsigned int btnl_previous_state = 0;
unsigned int btnr_previous_state = 0;

unsigned int btnc_start_time = 0;
unsigned int btnd_start_time = 0;
unsigned int btnl_start_time = 0;
unsigned int btnr_start_time = 0;

unsigned int btnc_end_time = 0;
unsigned int btnd_end_time = 0;
unsigned int btnl_end_time = 0;
unsigned int btnr_end_time = 0;

unsigned int btnc_reset_valid = 1;
unsigned int btnd_reset_valid = 1;
unsigned int btnl_reset_valid = 1;
unsigned int btnr_reset_valid = 1;

void start_timer() {

	// Configure timer
	XTmrCtr_Initialize(&timer, XPAR_AXI_TIMER_0_DEVICE_ID);
	XTmrCtr_SetResetValue(&timer, 0, XPAR_AXI_TIMER_0_CLOCK_FREQ_HZ / 1000);
	XTmrCtr_Start(&timer, 0);
}

////////// btnc //////////

unsigned int get_btnc_elapsed_time() {

	btnc_end_time = XTmrCtr_GetValue(&timer, 0);

	return (btnc_end_time - btnc_start_time) / FREQUENCY_HERTZ;
}

void reset_btnc_value() {

	unsigned int btnc_elapsed_time = get_btnc_elapsed_time();

	if ((btnc_current_state == 1) && (btnc_elapsed_time > DEBOUNCE_DELAY_MILLISECONDS)) {

		btnc_current_state = 0;

		btnc_reset_valid = RESET_SUCCESS;
	}
	else if (btnc_current_state == 1 && (btnc_elapsed_time <= DEBOUNCE_DELAY_MILLISECONDS)) {

		if (btnc_elapsed_time < 0) {

			btnc_start_time = XTmrCtr_GetValue(&timer, 0);
		}

		btnc_reset_valid = RESET_FAIL;
	}
}

unsigned int get_btnc_value() {

	if (btnc_reset_valid == RESET_SUCCESS) {

		if ((XGpio_DiscreteRead(&btnc_gpio, 1) == 1) && (btnc_previous_state == 0)) {

			btnc_previous_state = 1;
		}
		else if ((XGpio_DiscreteRead(&btnc_gpio, 1) == 0) && (btnc_previous_state == 1)) {

			btnc_previous_state = 0;
			btnc_current_state = 1;

			btnc_reset_valid = 0;

			btnc_start_time = XTmrCtr_GetValue(&timer, 0);
		}

		return btnc_current_state;
	}

	return 0;
}

////////// btnd //////////

unsigned int get_btnd_elapsed_time() {

	btnd_end_time = XTmrCtr_GetValue(&timer, 0);

	return (btnd_end_time - btnd_start_time) / FREQUENCY_HERTZ;
}

void reset_btnd_value() {

	unsigned int btnd_elapsed_time = get_btnd_elapsed_time();

	if ((btnd_current_state == 1) && (btnd_elapsed_time > DEBOUNCE_DELAY_MILLISECONDS)) {

		btnd_current_state = 0;

		btnd_reset_valid = RESET_SUCCESS;
	}
	else if (btnd_current_state == 1 && (btnd_elapsed_time <= DEBOUNCE_DELAY_MILLISECONDS)) {

		if (btnd_elapsed_time < 0) {

			btnd_start_time = XTmrCtr_GetValue(&timer, 0);
		}

		btnd_reset_valid = RESET_FAIL;
	}
}

unsigned int get_btnd_value() {

	if (btnd_reset_valid == RESET_SUCCESS) {

		if ((XGpio_DiscreteRead(&btnd_gpio, 1) == 1) && (btnd_previous_state == 0)) {

			btnd_previous_state = 1;
		}
		else if ((XGpio_DiscreteRead(&btnd_gpio, 1) == 0) && (btnd_previous_state == 1)) {

			btnd_previous_state = 0;
			btnd_current_state = 1;

			btnd_reset_valid = 0;

			btnd_start_time = XTmrCtr_GetValue(&timer, 0);
		}

		return btnd_current_state;
	}

	return 0;
}

////////// btnl //////////

unsigned int get_btnl_elapsed_time() {

	btnl_end_time = XTmrCtr_GetValue(&timer, 0);

	return (btnl_end_time - btnl_start_time) / FREQUENCY_HERTZ;
}

void reset_btnl_value() {

	unsigned int btnl_elapsed_time = get_btnl_elapsed_time();

	if ((btnl_current_state == 1) && (btnl_elapsed_time > DEBOUNCE_DELAY_MILLISECONDS)) {

		btnl_current_state = 0;

		btnl_reset_valid = RESET_SUCCESS;
	}
	else if (btnl_current_state == 1 && (btnl_elapsed_time <= DEBOUNCE_DELAY_MILLISECONDS)) {

		if (btnl_elapsed_time < 0) {

			btnl_start_time = XTmrCtr_GetValue(&timer, 0);
		}

		btnl_reset_valid = RESET_FAIL;
	}
}

unsigned int get_btnl_value() {

	if (btnl_reset_valid == RESET_SUCCESS) {

		if ((XGpio_DiscreteRead(&btnl_gpio, 1) == 1) && (btnl_previous_state == 0)) {

			btnl_previous_state = 1;
		}
		else if ((XGpio_DiscreteRead(&btnl_gpio, 1) == 0) && (btnl_previous_state == 1)) {

			btnl_previous_state = 0;
			btnl_current_state = 1;

			btnl_reset_valid = 0;

			btnl_start_time = XTmrCtr_GetValue(&timer, 0);
		}

		return btnl_current_state;
	}

	return 0;
}

////////// btnr //////////

unsigned int get_btnr_elapsed_time() {

	btnr_end_time = XTmrCtr_GetValue(&timer, 0);

	return (btnr_end_time - btnr_start_time) / FREQUENCY_HERTZ;
}

void reset_btnr_value() {

	unsigned int btnr_elapsed_time = get_btnr_elapsed_time();

	if ((btnr_current_state == 1) && (btnr_elapsed_time > DEBOUNCE_DELAY_MILLISECONDS)) {

		btnr_current_state = 0;

		btnr_reset_valid = RESET_SUCCESS;
	}
	else if (btnr_current_state == 1 && (btnr_elapsed_time <= DEBOUNCE_DELAY_MILLISECONDS)) {

		if (btnr_elapsed_time < 0) {

			btnr_start_time = XTmrCtr_GetValue(&timer, 0);
		}

		btnr_reset_valid = RESET_FAIL;
	}
}

unsigned int get_btnr_value() {

	if (btnr_reset_valid == RESET_SUCCESS) {

		if ((XGpio_DiscreteRead(&btnr_gpio, 1) == 0) && (btnr_previous_state == 1)) {

			btnr_previous_state = 1;
		}
		else if ((XGpio_DiscreteRead(&btnr_gpio, 1) == 1) && (btnr_previous_state == 0)) {

			btnr_previous_state = 0;
			btnr_current_state = 1;

			btnr_reset_valid = 0;

			btnr_start_time = XTmrCtr_GetValue(&timer, 0);
		}

		return btnr_current_state;
	}

	return 0;
}

void gpio_init() {

	XGpio_Initialize(&btnc_gpio, XPAR_AXI_GPIO_BTNC_DEVICE_ID);
	XGpio_Initialize(&btnd_gpio, XPAR_AXI_GPIO_BTND_DEVICE_ID);
	XGpio_Initialize(&btnl_gpio, XPAR_AXI_GPIO_BTNL_DEVICE_ID);
	XGpio_Initialize(&btnr_gpio, XPAR_AXI_GPIO_BTNR_DEVICE_ID);

	XGpio_SetDataDirection(&btnc_gpio, 1, 1);
	XGpio_SetDataDirection(&btnd_gpio, 1, 1);
	XGpio_SetDataDirection(&btnl_gpio, 1, 1);
	XGpio_SetDataDirection(&btnr_gpio, 1, 1);
}


int main() {

	unsigned int btnc_value = 0;
	unsigned int btnd_value = 0;
	unsigned int btnl_value = 0;
	unsigned int btnr_value = 0;

	btnc_reset_valid = RESET_SUCCESS;
	btnc_current_state = 0;

	gpio_init();
	start_timer();

	printf("Start IO\n");

	while(1) {

		btnc_value = get_btnc_value();
		btnd_value = get_btnd_value();
		btnl_value = get_btnl_value();
		btnr_value = get_btnr_value();

		if (btnc_value == 1) {

			printf("btnc_value = %u\n", btnc_value);
		}

		if (btnd_value == 1) {

			printf("btnd_value = %u\n", btnd_value);
		}

		if (btnl_value == 1) {

			printf("btnl_value = %u\n", btnl_value);
		}

		if (btnr_value == 1) {

			printf("btnr_value = %u\n", btnr_value);
		}

		reset_btnc_value();
		reset_btnd_value();
		reset_btnl_value();
		reset_btnr_value();
	}

    return 0;
}
